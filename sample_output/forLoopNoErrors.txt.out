TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: i
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: INTCONST             LEXEME: 1
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: FOR                  LEXEME: for
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: IN                   LEXEME: in
TOKEN: LIST                 LEXEME: list
TOKEN: LPAREN               LEXEME: (
TOKEN: FLOATCONST           LEXEME: 3.14
CONST -> FLOATCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: STRCONST             LEXEME: "bojack"
CONST -> STRCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: TRUE                 LEXEME: TRUE
CONST -> TRUE
TOKEN: RPAREN               LEXEME: )
CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR
TOKEN: RPAREN               LEXEME: )
TOKEN: LBRACE               LEXEME: {
TOKEN: PRINT                LEXEME: print
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: LBRACKET             LEXEME: [
TOKEN: LBRACKET             LEXEME: [
TOKEN: IDENT                LEXEME: i
TOKEN: RBRACKET             LEXEME: ]
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: RBRACKET             LEXEME: ]
TOKEN: RPAREN               LEXEME: )
SINGLE_ELEMENT -> IDENT [[ EXPR ]]
VAR -> SINGLE_ELEMENT
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR
TOKEN: SEMICOLON            LEXEME: ;
TOKEN: IDENT                LEXEME: i
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: IDENT                LEXEME: i
TOKEN: ADD                  LEXEME: +
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> +
TOKEN: INTCONST             LEXEME: 1
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RBRACE               LEXEME: }
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
FOR_EXPR -> FOR ( IDENT IN EXPR ) EXPR
EXPR -> FOR_EXPR
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
START -> EXPR

---- Completed parsing ----

