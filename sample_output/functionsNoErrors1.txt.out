TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 4
CONST -> INTCONST
FACTOR -> CONST
TOKEN: POWER                LEXEME: ^
MULT_OP -> ^
TOKEN: INTCONST             LEXEME: 7
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: banana
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: FUNCTION             LEXEME: function
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: COMMA                LEXEME: ,
TOKEN: IDENT                LEXEME: y
TOKEN: COMMA                LEXEME: ,
TOKEN: IDENT                LEXEME: z
TOKEN: RPAREN               LEXEME: )
PARAMS -> IDENT
PARAMS -> IDENT, PARAMS
PARAMS -> IDENT, PARAMS
PARAM_LIST -> PARAMS
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: x
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: INTCONST             LEXEME: 2
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT                LEXEME: y
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: INTCONST             LEXEME: 3
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT                LEXEME: z
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: STRCONST             LEXEME: "BANANA"
CONST -> STRCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: QUIT                 LEXEME: quit
TOKEN: LPAREN               LEXEME: (
TOKEN: RPAREN               LEXEME: )
QUIT_EXPR -> QUIT()
