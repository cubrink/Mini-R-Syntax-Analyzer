TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 5
CONST -> INTCONST
FACTOR -> CONST
TOKEN: ADD                  LEXEME: +
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> +
TOKEN: INTCONST             LEXEME: 14
CONST -> INTCONST
FACTOR -> CONST
TOKEN: GT                   LEXEME: >
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: INTCONST             LEXEME: 9
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LBRACE               LEXEME: {
TOKEN: FOR                  LEXEME: for
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: year
TOKEN: IN                   LEXEME: in
TOKEN: LIST                 LEXEME: list
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 1
CONST -> INTCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: INTCONST             LEXEME: 2
CONST -> INTCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: INTCONST             LEXEME: 3
CONST -> INTCONST
TOKEN: RPAREN               LEXEME: )
CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR
TOKEN: RPAREN               LEXEME: )
TOKEN: CAT                  LEXEME: cat
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: year
TOKEN: RPAREN               LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> CAT ( EXPR )
EXPR -> OUTPUT_EXPR
FOR_EXPR -> FOR ( IDENT IN EXPR ) EXPR
EXPR -> FOR_EXPR
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
THEN_EXPR -> EXPR
TOKEN: ELSE                 LEXEME: else
TOKEN: LBRACE               LEXEME: {
TOKEN: WHILE                LEXEME: while
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: GT                   LEXEME: >
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: INTCONST             LEXEME: 0
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: FALSE                LEXEME: FALSE
CONST -> FALSE
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LIST                 LEXEME: list
TOKEN: LPAREN               LEXEME: (
TOKEN: STRCONST             LEXEME: "one"
CONST -> STRCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: STRCONST             LEXEME: "two"
CONST -> STRCONST
TOKEN: RPAREN               LEXEME: )
CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR
THEN_EXPR -> EXPR
TOKEN: RBRACE               LEXEME: }
IF_EXPR -> COND_IF ) THEN_EXPR
EXPR -> IF_EXPR
WHILE_EXPR -> WHILE ( EXPR ) EXPR
EXPR -> WHILE_EXPR
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
IF_EXPR -> COND_IF ) THEN_EXPR ELSE EXPR
EXPR -> IF_EXPR
START -> EXPR

---- Completed parsing ----

