TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: FALSE                LEXEME: FALSE
CONST -> FALSE
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: fluffy
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: TRUE                 LEXEME: TRUE
CONST -> TRUE
FACTOR -> CONST
TOKEN: RBRACE               LEXEME: }
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
THEN_EXPR -> EXPR
TOKEN: ELSE                 LEXEME: else
TOKEN: LBRACE               LEXEME: {
TOKEN: CAT                  LEXEME: cat
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: number_of_tacos
TOKEN: RPAREN               LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> CAT ( EXPR )
EXPR -> OUTPUT_EXPR
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
IF_EXPR -> COND_IF ) THEN_EXPR ELSE EXPR
EXPR -> IF_EXPR
START -> EXPR

---- Completed parsing ----

