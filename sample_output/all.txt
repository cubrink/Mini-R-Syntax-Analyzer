TOKEN: FOR                  LEXEME: for
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: LBRACKET             LEXEME: [
Line 1: syntax error
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: i
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: INTCONST             LEXEME: 1
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: FOR                  LEXEME: for
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: IN                   LEXEME: in
TOKEN: LIST                 LEXEME: list
TOKEN: LPAREN               LEXEME: (
TOKEN: FLOATCONST           LEXEME: 3.14
CONST -> FLOATCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: STRCONST             LEXEME: "bojack"
CONST -> STRCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: TRUE                 LEXEME: TRUE
CONST -> TRUE
TOKEN: RPAREN               LEXEME: )
CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR
TOKEN: RPAREN               LEXEME: )
TOKEN: LBRACE               LEXEME: {
TOKEN: PRINT                LEXEME: print
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: LBRACKET             LEXEME: [
TOKEN: LBRACKET             LEXEME: [
TOKEN: IDENT                LEXEME: i
TOKEN: RBRACKET             LEXEME: ]
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: RBRACKET             LEXEME: ]
TOKEN: RPAREN               LEXEME: )
SINGLE_ELEMENT -> IDENT [[ EXPR ]]
VAR -> SINGLE_ELEMENT
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR
TOKEN: SEMICOLON            LEXEME: ;
TOKEN: IDENT                LEXEME: i
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: IDENT                LEXEME: i
TOKEN: ADD                  LEXEME: +
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> +
TOKEN: INTCONST             LEXEME: 1
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RBRACE               LEXEME: }
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
FOR_EXPR -> FOR ( IDENT IN EXPR ) EXPR
EXPR -> FOR_EXPR
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
START -> EXPR

---- Completed parsing ----

TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 4
CONST -> INTCONST
FACTOR -> CONST
TOKEN: POWER                LEXEME: ^
MULT_OP -> ^
TOKEN: INTCONST             LEXEME: 7
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: banana
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: FUNCTION             LEXEME: function
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: COMMA                LEXEME: ,
TOKEN: IDENT                LEXEME: y
TOKEN: COMMA                LEXEME: ,
TOKEN: IDENT                LEXEME: z
TOKEN: RPAREN               LEXEME: )
PARAMS -> IDENT
PARAMS -> IDENT, PARAMS
PARAMS -> IDENT, PARAMS
PARAM_LIST -> PARAMS
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: x
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: INTCONST             LEXEME: 2
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT                LEXEME: y
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: INTCONST             LEXEME: 3
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT                LEXEME: z
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: STRCONST             LEXEME: "BANANA"
CONST -> STRCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: QUIT                 LEXEME: quit
TOKEN: LPAREN               LEXEME: (
TOKEN: RPAREN               LEXEME: )
QUIT_EXPR -> QUIT()
TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: TRUE                 LEXEME: TRUE
CONST -> TRUE
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: cranberry
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: one
TOKEN: COMMA                LEXEME: ,
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: IDENT                LEXEME: two
TOKEN: COMMA                LEXEME: ,
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: IDENT                LEXEME: three
TOKEN: RPAREN               LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ARGS -> EXPR
ARGS -> EXPR, ARGS
ARGS -> EXPR, ARGS
ARG_LIST -> ARGS
FUNCTION_CALL -> IDENT ( ARG_LIST )
EXPR -> FUNCTION_CALL
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
THEN_EXPR -> EXPR
TOKEN: ELSE                 LEXEME: else
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: blueberry
TOKEN: LPAREN               LEXEME: (
TOKEN: RPAREN               LEXEME: )
NO_ARGS -> epsilon
ARG_LIST -> NO_ARGS
FUNCTION_CALL -> IDENT ( ARG_LIST )
EXPR -> FUNCTION_CALL
TOKEN: SEMICOLON            LEXEME: ;
TOKEN: IDENT                LEXEME: watermelon
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: FLOATCONST           LEXEME: 7.894
CONST -> FLOATCONST
FACTOR -> CONST
TOKEN: SEMICOLON            LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT                LEXEME: strawberry
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: READ                 LEXEME: read
TOKEN: LPAREN               LEXEME: (
TOKEN: RPAREN               LEXEME: )
INPUT_EXPR -> READ ( )
EXPR -> INPUT_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST
EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
IF_EXPR -> COND_IF ) THEN_EXPR ELSE EXPR
EXPR -> IF_EXPR
START -> EXPR

---- Completed parsing ----

TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 5
CONST -> INTCONST
FACTOR -> CONST
TOKEN: ADD                  LEXEME: +
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> +
TOKEN: INTCONST             LEXEME: 14
CONST -> INTCONST
FACTOR -> CONST
TOKEN: GT                   LEXEME: >
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: INTCONST             LEXEME: 9
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LBRACE               LEXEME: {
TOKEN: FOR                  LEXEME: for
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: year
TOKEN: IN                   LEXEME: in
TOKEN: LIST                 LEXEME: list
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 1
CONST -> INTCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: INTCONST             LEXEME: 2
CONST -> INTCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: INTCONST             LEXEME: 3
CONST -> INTCONST
TOKEN: RPAREN               LEXEME: )
CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR
TOKEN: RPAREN               LEXEME: )
TOKEN: PRINT                LEXEME: print
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: year
TOKEN: RPAREN               LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR
FOR_EXPR -> FOR ( IDENT IN EXPR ) EXPR
EXPR -> FOR_EXPR
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
THEN_EXPR -> EXPR
TOKEN: ELSE                 LEXEME: else
TOKEN: LBRACE               LEXEME: {
TOKEN: WHILE                LEXEME: while
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: GT                   LEXEME: >
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: INTCONST             LEXEME: 0
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: IDENT                LEXEME: kitty
TOKEN: CAT                  LEXEME: cat
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
WHILE_EXPR -> WHILE ( EXPR ) EXPR
EXPR -> WHILE_EXPR
EXPR_LIST -> epsilon
Line 4: syntax error
TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 5
CONST -> INTCONST
FACTOR -> CONST
TOKEN: ADD                  LEXEME: +
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> +
TOKEN: INTCONST             LEXEME: 14
CONST -> INTCONST
FACTOR -> CONST
TOKEN: GT                   LEXEME: >
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: INTCONST             LEXEME: 9
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LBRACE               LEXEME: {
TOKEN: FOR                  LEXEME: for
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: year
TOKEN: IN                   LEXEME: in
TOKEN: LIST                 LEXEME: list
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 1
CONST -> INTCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: INTCONST             LEXEME: 2
CONST -> INTCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: INTCONST             LEXEME: 3
CONST -> INTCONST
TOKEN: RPAREN               LEXEME: )
CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR
TOKEN: RPAREN               LEXEME: )
TOKEN: CAT                  LEXEME: cat
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: year
TOKEN: RPAREN               LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> CAT ( EXPR )
EXPR -> OUTPUT_EXPR
FOR_EXPR -> FOR ( IDENT IN EXPR ) EXPR
EXPR -> FOR_EXPR
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
THEN_EXPR -> EXPR
TOKEN: ELSE                 LEXEME: else
TOKEN: LBRACE               LEXEME: {
TOKEN: WHILE                LEXEME: while
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: x
TOKEN: GT                   LEXEME: >
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: INTCONST             LEXEME: 0
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: FALSE                LEXEME: FALSE
CONST -> FALSE
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LIST                 LEXEME: list
TOKEN: LPAREN               LEXEME: (
TOKEN: STRCONST             LEXEME: "one"
CONST -> STRCONST
TOKEN: COMMA                LEXEME: ,
TOKEN: STRCONST             LEXEME: "two"
CONST -> STRCONST
TOKEN: RPAREN               LEXEME: )
CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR
THEN_EXPR -> EXPR
TOKEN: RBRACE               LEXEME: }
IF_EXPR -> COND_IF ) THEN_EXPR
EXPR -> IF_EXPR
WHILE_EXPR -> WHILE ( EXPR ) EXPR
EXPR -> WHILE_EXPR
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
IF_EXPR -> COND_IF ) THEN_EXPR ELSE EXPR
EXPR -> IF_EXPR
START -> EXPR

---- Completed parsing ----

TOKEN: IF                   LEXEME: if
TOKEN: LPAREN               LEXEME: (
TOKEN: FALSE                LEXEME: FALSE
CONST -> FALSE
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
COND_IF -> IF ( EXPR
TOKEN: LBRACE               LEXEME: {
TOKEN: IDENT                LEXEME: fluffy
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: TRUE                 LEXEME: TRUE
CONST -> TRUE
FACTOR -> CONST
TOKEN: RBRACE               LEXEME: }
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
THEN_EXPR -> EXPR
TOKEN: ELSE                 LEXEME: else
TOKEN: LBRACE               LEXEME: {
TOKEN: CAT                  LEXEME: cat
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: number_of_tacos
TOKEN: RPAREN               LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> CAT ( EXPR )
EXPR -> OUTPUT_EXPR
TOKEN: RBRACE               LEXEME: }
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
IF_EXPR -> COND_IF ) THEN_EXPR ELSE EXPR
EXPR -> IF_EXPR
START -> EXPR

---- Completed parsing ----

TOKEN: IDENT                LEXEME: result
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: LPAREN               LEXEME: (
TOKEN: TRUE                 LEXEME: TRUE
CONST -> TRUE
FACTOR -> CONST
TOKEN: OR                   LEXEME: |
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> |
TOKEN: OR                   LEXEME: |
Line 1: syntax error
TOKEN: IDENT                LEXEME: fifty_five
TOKEN: ASSIGN               LEXEME: =
INDEX ->  epsilon
TOKEN: LPAREN               LEXEME: (
TOKEN: LPAREN               LEXEME: (
TOKEN: LPAREN               LEXEME: (
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 3
CONST -> INTCONST
FACTOR -> CONST
TOKEN: POWER                LEXEME: ^
MULT_OP -> ^
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 4
CONST -> INTCONST
FACTOR -> CONST
TOKEN: GT                   LEXEME: >
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: INTCONST             LEXEME: 3
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: NE                   LEXEME: !=
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> !=
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: fifty
TOKEN: MOD                  LEXEME: %%
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP -> %%
TOKEN: IDENT                LEXEME: seventy
TOKEN: RPAREN               LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: DIV                  LEXEME: /
MULT_OP -> /
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 7
CONST -> INTCONST
FACTOR -> CONST
TOKEN: LE                   LEXEME: <=
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> <=
TOKEN: LPAREN               LEXEME: (
TOKEN: NOT                  LEXEME: !
TOKEN: IDENT                LEXEME: steak
TOKEN: OR                   LEXEME: |
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
FACTOR -> ! FACTOR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> |
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: chicken
TOKEN: EQ                   LEXEME: ==
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> ==
TOKEN: IDENT                LEXEME: bird
TOKEN: RPAREN               LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: GE                   LEXEME: >=
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >=
TOKEN: LPAREN               LEXEME: (
TOKEN: INTCONST             LEXEME: 9
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SUB                  LEXEME: -
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> -
TOKEN: LPAREN               LEXEME: (
TOKEN: TRUE                 LEXEME: TRUE
CONST -> TRUE
FACTOR -> CONST
TOKEN: AND                  LEXEME: &
MULT_OP -> &
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: watermelon
TOKEN: LBRACKET             LEXEME: [
TOKEN: LBRACKET             LEXEME: [
TOKEN: INTCONST             LEXEME: 3
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RBRACKET             LEXEME: ]
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: RBRACKET             LEXEME: ]
TOKEN: RPAREN               LEXEME: )
SINGLE_ELEMENT -> IDENT [[ EXPR ]]
VAR -> SINGLE_ELEMENT
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: MULT                 LEXEME: *
MULT_OP -> *
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: taco
TOKEN: LT                   LEXEME: <
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> <
TOKEN: LPAREN               LEXEME: (
TOKEN: IDENT                LEXEME: tacos
TOKEN: POWER                LEXEME: ^
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP -> ^
TOKEN: INTCONST             LEXEME: 2
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
TOKEN: RPAREN               LEXEME: )
MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
FACTOR -> ( EXPR )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX = EXPR
EXPR -> ASSIGNMENT_EXPR
START -> EXPR

---- Completed parsing ----

